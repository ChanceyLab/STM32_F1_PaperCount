#include "key.h"
#include "stm32f10x.h"
#include "delay.h"
//key-gnd
#define kEY GPIO_ReadInputDataBit(GPIOE,GPIO_Pin_4)
void key_init()
{
  GPIO_InitTypeDef GPIO_Initstructure;
	
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOE,ENABLE);//GPIOE   使能时钟
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);//GPIOA   使能时钟
	
	GPIO_Initstructure.GPIO_Mode=GPIO_Mode_IPU;//默认为vcc输入(上拉输入)
	GPIO_Initstructure.GPIO_Pin=GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4;
	GPIO_Init(GPIOE,&GPIO_Initstructure);//e口的按键一端接地，
	
	GPIO_Initstructure.GPIO_Mode=GPIO_Mode_IPD;//默认gnd输入（下拉输入）
	GPIO_Initstructure.GPIO_Pin=GPIO_Pin_0;
	GPIO_Init(GPIOA,&GPIO_Initstructure);//a口按键一端接vcc，
	
	
}
u8 key_scan()               //按键检测需要设置不连续按
{
	static u8 k_puss = 1;
	if(k_puss && (k0==0||k1==0||k2==0||kw==1))
	{
		delay_ms(50);
		if(k0==0)
		{
			k_puss = 0;
			return 1;
		}
		if(k1==0)
		{
			k_puss = 0;
			return 2;
		}
		if(k2==0)
		{
			k_puss = 0;
			return 3;
		}
		if(kw==1)
		{
			delay_ms(50);
			k_puss = 0;
			return 4;
		}
	}		
	else if((k_puss==1) || (k0==1 && k1==1 && k2==1 && kw==0))
	{
		k_puss = 1;
		return 0;
	}

}





/***************************支持连续按下和不支持连续按下**********************************
u8 key_scan(void)             
{
//	static u8 k_puss = 1;
	if(
//k_puss && 
(k1==1||k2==1||k3==1||k4==1||k5==1||
								k6==1||k7==1||k8==1||k9==1||k10==1||
								k11==1||k12==1))
	{
		delay_ms(10);
		if(k1==1)
		{
//			k_puss = 0;
			return 1;
		}
		if(k2==1)
		{
//			k_puss = 0;
			return 2;
		}
		if(k3==1)
		{
//			k_puss = 0;
			return 3;
		}
		if(k4==1)
		{
//			k_puss = 0;
			return 4;
		}
		if(k5==1)
		{
//			k_puss = 0;
			return 5;
		}
		if(k6==1)
		{
//			k_puss = 0;
			return 6;
		}
		if(k7==1)
		{
//			k_puss = 0;
			return 7;
		}
		if(k8==1)
		{
//			k_puss = 0;
			return 8;
		}
		if(k9==1)
		{
//			k_puss = 0;
			return 9;
		}
		if(k10==1)
		{
//			k_puss = 0;
			return 10;
		}
		if(k11==1)
		{
//			k_puss = 0;
			return 11;
		}
		if(k12==1)
		{
//			k_puss = 0;
			return 12;
		}
	}		
	else if(
	//(k_puss==1) || 
	(k1==0 && k2==0 && k3==0 && k4==0 && k5==0 && 
													k6==0 && k7==0 && k8==0 && k9==0 && k10==0 &&	
													k11==0 && k12==0))
	{
//		k_puss = 1;
		return 0;
	}

}




*********************************************************************************************/
